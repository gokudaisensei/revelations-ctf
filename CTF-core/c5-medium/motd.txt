
 ██████╗ ██████╗ ██████╗ ███████╗ ██████╗ ██╗   ██╗███████╗███████╗████████╗
██╔════╝██╔═══██╗██╔══██╗██╔════╝██╔═══██╗██║   ██║██╔════╝██╔════╝╚══██╔══╝
██║     ██║   ██║██║  ██║█████╗  ██║   ██║██║   ██║█████╗  ███████╗   ██║   
██║     ██║   ██║██║  ██║██╔══╝  ██║▄▄ ██║██║   ██║██╔══╝  ╚════██║   ██║   
╚██████╗╚██████╔╝██████╔╝███████╗╚██████╔╝╚██████╔╝███████╗███████║   ██║   
 ╚═════╝ ╚═════╝ ╚═════╝ ╚══════╝ ╚══▀▀═╝  ╚═════╝ ╚══════╝╚══════╝   ╚═╝   
                                                                            

===============================================
         Welcome to CODE QUEST!
===============================================

Rules:
  1. Do not share flags with others.
  2. Teams must consist of 2 players.
  3. Use only the provided tools and hints.
  4. Follow the challenge guidelines strictly.
  5. Most importantly, have fun and think creatively!

Current Challenge: The Shell Escape (Binary Exploitation)
Category: Binary Exploitation
Difficulty: Medium

Description:
Jerry has discovered a buffer overflow vulnerability in Tom's mousetrap program.
This vulnerability allows you to overflow a limited input buffer and overwrite the
return address, redirecting execution to a hidden function that spawns a shell.
Your mission is to craft an exploit payload that redirects execution to that secret
shell function, thereby revealing the flag stored in a protected directory.

Challenge File:
- passcodeshell (A vulnerable binary that accepts user input)

Solution Hint:
- Analyze the binary using a debugger (e.g., GDB) to determine the buffer size and the offset to the return address.
- Look for the function named 'secret_shell' (or similar) in the binary.
- Create an exploit payload that overflows the buffer (64 bytes) and overwrites the return address with the address of the secret shell function.
- Tools like pwntools or Python scripts can help automate the exploitation.

Good luck, and may your exploitation skills prevail!
===============================================


